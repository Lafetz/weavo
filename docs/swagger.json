{
    "swagger": "2.0",
    "info": {
        "description": "This is the Weavo server.",
        "title": "Weavo API",
        "termsOfService": "http://github.com/lafetz/weavo",
        "contact": {
            "name": "API Support",
            "url": "http://github.com/lafetz/weavo"
        },
        "version": "1.0"
    },
    "paths": {
        "/api/v1/locations": {
            "post": {
                "description": "Create a new location with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Create a new location",
                "parameters": [
                    {
                        "description": "Location request body",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LocationReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Location created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.LocationRes"
                        }
                    },
                    "400": {
                        "description": "Invalid input format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/locations/{id}": {
            "get": {
                "description": "Retrieves a location from the service using the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Retrieve a location by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "location retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.LocationRes"
                        }
                    },
                    "400": {
                        "description": "invalid id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "location not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing location with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Update a location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Location request body",
                        "name": "LocationReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LocationReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "location updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.LocationRes"
                        }
                    },
                    "400": {
                        "description": "Invalid input format or invalid id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "location not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a location by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Delete a location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "location deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "location not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/weather": {
            "get": {
                "description": "Retrieves weather information for a specified city.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Get weather information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "City name",
                        "name": "city",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "weather retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.WeatherRes"
                        }
                    },
                    "400": {
                        "description": "invalid city",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "city not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.Coordinates": {
            "type": "object",
            "required": [
                "lat",
                "lon"
            ],
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                }
            }
        },
        "dto.LocationReq": {
            "type": "object",
            "required": [
                "city",
                "coordinates",
                "nickname",
                "notes"
            ],
            "properties": {
                "city": {
                    "type": "string",
                    "minLength": 1
                },
                "coordinates": {
                    "$ref": "#/definitions/dto.Coordinates"
                },
                "nickname": {
                    "type": "string",
                    "minLength": 1
                },
                "notes": {
                    "type": "string",
                    "minLength": 1
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "dto.LocationRes": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "coordinates": {
                    "$ref": "#/definitions/dto.Coordinates"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                }
            }
        },
        "dto.WeatherRes": {
            "type": "object",
            "properties": {
                "condition": {
                    "type": "string"
                },
                "date_time": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "lat": {
                    "type": "number"
                },
                "location": {
                    "type": "string"
                },
                "lon": {
                    "type": "number"
                },
                "temperature": {
                    "type": "number"
                },
                "units": {
                    "type": "string"
                }
            }
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}